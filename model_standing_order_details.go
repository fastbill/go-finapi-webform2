/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// StandingOrderDetails struct for StandingOrderDetails
type StandingOrderDetails struct {
	Amount Amount `json:"amount"`
	// The purpose of the transfer transaction
	Purpose NullableString `json:"purpose,omitempty"`
	// SEPA purpose code, according to ISO 20022, external codes set.<br/>Note that the SEPA purpose code may be ignored by some banks.
	SepaPurposeCode NullableString `json:"sepaPurposeCode,omitempty"`
	// End-To-End ID for the transfer transaction
	EndToEndId NullableString `json:"endToEndId,omitempty"`
	Recipient Recipient `json:"recipient"`
	Sender NullableSender `json:"sender,omitempty"`
	// Date when the 1st of the standing orders should be executed, in the format <code>YYYY-MM-DD</code>. The date may not be in the past.
	StartDate string `json:"startDate"`
	// Date by when the last standing order in the request should be executed, in the format <code>YYYY-MM-DD</code>. If is not provided, it is an infinite standing order. This date must be after the start date.
	EndDate NullableString `json:"endDate,omitempty"`
	// The frequency of the recurring payment resulting from the standing order.
	Frequency string `json:"frequency"`
	// The profile to be applied to the web form.<br/>This will overwrite the default profile, if such a profile exists.
	ProfileId NullableString `json:"profileId,omitempty"`
	// The URL where the end-user will be redirected to after completing the bank login and (possibly) the SCA on the bank's website. Must always be provided by mandators with <code>FULLY_LICENSED</code> or <code>PISP</code> license type, and may not be provided by mandators with other license types. Find more info in the <a target='_blank' href='https://documentation.finapi.io/webform/Licensed-customers-using-the-Web-Form.2832302195.html'>Web Form 2.0 Public Documentation</a>.
	RedirectUrl NullableString `json:"redirectUrl,omitempty"`
	Callbacks NullableCallbacks `json:"callbacks,omitempty"`
}

// NewStandingOrderDetails instantiates a new StandingOrderDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandingOrderDetails(amount Amount, recipient Recipient, startDate string, frequency string) *StandingOrderDetails {
	this := StandingOrderDetails{}
	this.Amount = amount
	this.Recipient = recipient
	this.StartDate = startDate
	this.Frequency = frequency
	return &this
}

// NewStandingOrderDetailsWithDefaults instantiates a new StandingOrderDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandingOrderDetailsWithDefaults() *StandingOrderDetails {
	this := StandingOrderDetails{}
	return &this
}

// GetAmount returns the Amount field value
func (o *StandingOrderDetails) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *StandingOrderDetails) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *StandingOrderDetails) SetAmount(v Amount) {
	o.Amount = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetPurpose() string {
	if o == nil || o.Purpose.Get() == nil {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *StandingOrderDetails) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *StandingOrderDetails) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *StandingOrderDetails) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetSepaPurposeCode returns the SepaPurposeCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetSepaPurposeCode() string {
	if o == nil || o.SepaPurposeCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaPurposeCode.Get()
}

// GetSepaPurposeCodeOk returns a tuple with the SepaPurposeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetSepaPurposeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SepaPurposeCode.Get(), o.SepaPurposeCode.IsSet()
}

// HasSepaPurposeCode returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasSepaPurposeCode() bool {
	if o != nil && o.SepaPurposeCode.IsSet() {
		return true
	}

	return false
}

// SetSepaPurposeCode gets a reference to the given NullableString and assigns it to the SepaPurposeCode field.
func (o *StandingOrderDetails) SetSepaPurposeCode(v string) {
	o.SepaPurposeCode.Set(&v)
}
// SetSepaPurposeCodeNil sets the value for SepaPurposeCode to be an explicit nil
func (o *StandingOrderDetails) SetSepaPurposeCodeNil() {
	o.SepaPurposeCode.Set(nil)
}

// UnsetSepaPurposeCode ensures that no value is present for SepaPurposeCode, not even an explicit nil
func (o *StandingOrderDetails) UnsetSepaPurposeCode() {
	o.SepaPurposeCode.Unset()
}

// GetEndToEndId returns the EndToEndId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetEndToEndId() string {
	if o == nil || o.EndToEndId.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndToEndId.Get()
}

// GetEndToEndIdOk returns a tuple with the EndToEndId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetEndToEndIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndToEndId.Get(), o.EndToEndId.IsSet()
}

// HasEndToEndId returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasEndToEndId() bool {
	if o != nil && o.EndToEndId.IsSet() {
		return true
	}

	return false
}

// SetEndToEndId gets a reference to the given NullableString and assigns it to the EndToEndId field.
func (o *StandingOrderDetails) SetEndToEndId(v string) {
	o.EndToEndId.Set(&v)
}
// SetEndToEndIdNil sets the value for EndToEndId to be an explicit nil
func (o *StandingOrderDetails) SetEndToEndIdNil() {
	o.EndToEndId.Set(nil)
}

// UnsetEndToEndId ensures that no value is present for EndToEndId, not even an explicit nil
func (o *StandingOrderDetails) UnsetEndToEndId() {
	o.EndToEndId.Unset()
}

// GetRecipient returns the Recipient field value
func (o *StandingOrderDetails) GetRecipient() Recipient {
	if o == nil {
		var ret Recipient
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *StandingOrderDetails) GetRecipientOk() (*Recipient, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *StandingOrderDetails) SetRecipient(v Recipient) {
	o.Recipient = v
}

// GetSender returns the Sender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetSender() Sender {
	if o == nil || o.Sender.Get() == nil {
		var ret Sender
		return ret
	}
	return *o.Sender.Get()
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetSenderOk() (*Sender, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sender.Get(), o.Sender.IsSet()
}

// HasSender returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasSender() bool {
	if o != nil && o.Sender.IsSet() {
		return true
	}

	return false
}

// SetSender gets a reference to the given NullableSender and assigns it to the Sender field.
func (o *StandingOrderDetails) SetSender(v Sender) {
	o.Sender.Set(&v)
}
// SetSenderNil sets the value for Sender to be an explicit nil
func (o *StandingOrderDetails) SetSenderNil() {
	o.Sender.Set(nil)
}

// UnsetSender ensures that no value is present for Sender, not even an explicit nil
func (o *StandingOrderDetails) UnsetSender() {
	o.Sender.Unset()
}

// GetStartDate returns the StartDate field value
func (o *StandingOrderDetails) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *StandingOrderDetails) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *StandingOrderDetails) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *StandingOrderDetails) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *StandingOrderDetails) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *StandingOrderDetails) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetFrequency returns the Frequency field value
func (o *StandingOrderDetails) GetFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *StandingOrderDetails) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *StandingOrderDetails) SetFrequency(v string) {
	o.Frequency = v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetProfileId() string {
	if o == nil || o.ProfileId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProfileId.Get()
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProfileId.Get(), o.ProfileId.IsSet()
}

// HasProfileId returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasProfileId() bool {
	if o != nil && o.ProfileId.IsSet() {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given NullableString and assigns it to the ProfileId field.
func (o *StandingOrderDetails) SetProfileId(v string) {
	o.ProfileId.Set(&v)
}
// SetProfileIdNil sets the value for ProfileId to be an explicit nil
func (o *StandingOrderDetails) SetProfileIdNil() {
	o.ProfileId.Set(nil)
}

// UnsetProfileId ensures that no value is present for ProfileId, not even an explicit nil
func (o *StandingOrderDetails) UnsetProfileId() {
	o.ProfileId.Unset()
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetRedirectUrl() string {
	if o == nil || o.RedirectUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.RedirectUrl.Get()
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetRedirectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUrl.Get(), o.RedirectUrl.IsSet()
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given NullableString and assigns it to the RedirectUrl field.
func (o *StandingOrderDetails) SetRedirectUrl(v string) {
	o.RedirectUrl.Set(&v)
}
// SetRedirectUrlNil sets the value for RedirectUrl to be an explicit nil
func (o *StandingOrderDetails) SetRedirectUrlNil() {
	o.RedirectUrl.Set(nil)
}

// UnsetRedirectUrl ensures that no value is present for RedirectUrl, not even an explicit nil
func (o *StandingOrderDetails) UnsetRedirectUrl() {
	o.RedirectUrl.Unset()
}

// GetCallbacks returns the Callbacks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandingOrderDetails) GetCallbacks() Callbacks {
	if o == nil || o.Callbacks.Get() == nil {
		var ret Callbacks
		return ret
	}
	return *o.Callbacks.Get()
}

// GetCallbacksOk returns a tuple with the Callbacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandingOrderDetails) GetCallbacksOk() (*Callbacks, bool) {
	if o == nil {
		return nil, false
	}
	return o.Callbacks.Get(), o.Callbacks.IsSet()
}

// HasCallbacks returns a boolean if a field has been set.
func (o *StandingOrderDetails) HasCallbacks() bool {
	if o != nil && o.Callbacks.IsSet() {
		return true
	}

	return false
}

// SetCallbacks gets a reference to the given NullableCallbacks and assigns it to the Callbacks field.
func (o *StandingOrderDetails) SetCallbacks(v Callbacks) {
	o.Callbacks.Set(&v)
}
// SetCallbacksNil sets the value for Callbacks to be an explicit nil
func (o *StandingOrderDetails) SetCallbacksNil() {
	o.Callbacks.Set(nil)
}

// UnsetCallbacks ensures that no value is present for Callbacks, not even an explicit nil
func (o *StandingOrderDetails) UnsetCallbacks() {
	o.Callbacks.Unset()
}

func (o StandingOrderDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if o.SepaPurposeCode.IsSet() {
		toSerialize["sepaPurposeCode"] = o.SepaPurposeCode.Get()
	}
	if o.EndToEndId.IsSet() {
		toSerialize["endToEndId"] = o.EndToEndId.Get()
	}
	if true {
		toSerialize["recipient"] = o.Recipient
	}
	if o.Sender.IsSet() {
		toSerialize["sender"] = o.Sender.Get()
	}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if true {
		toSerialize["frequency"] = o.Frequency
	}
	if o.ProfileId.IsSet() {
		toSerialize["profileId"] = o.ProfileId.Get()
	}
	if o.RedirectUrl.IsSet() {
		toSerialize["redirectUrl"] = o.RedirectUrl.Get()
	}
	if o.Callbacks.IsSet() {
		toSerialize["callbacks"] = o.Callbacks.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStandingOrderDetails struct {
	value *StandingOrderDetails
	isSet bool
}

func (v NullableStandingOrderDetails) Get() *StandingOrderDetails {
	return v.value
}

func (v *NullableStandingOrderDetails) Set(val *StandingOrderDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableStandingOrderDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableStandingOrderDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandingOrderDetails(val *StandingOrderDetails) *NullableStandingOrderDetails {
	return &NullableStandingOrderDetails{value: val, isSet: true}
}

func (v NullableStandingOrderDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandingOrderDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


