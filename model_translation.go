/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// Translation Set of titles and subtitles for a particular language, given in the <a target='_blank' href='https://www.iso.org/iso-639-language-codes.html'>ISO-639</a> 2 letter format code, grouped by view
type Translation struct {
	BankSearchView NullableShortTranslationBlock `json:"bankSearchView,omitempty"`
	BankLoginView NullableTranslationBlock `json:"bankLoginView,omitempty"`
	RedirectBankLoginView NullableTranslationBlock `json:"redirectBankLoginView,omitempty"`
	ScaMethodSelectionView NullableShortTranslationBlock `json:"scaMethodSelectionView,omitempty"`
	ScaChallengeView NullableShortTranslationBlock `json:"scaChallengeView,omitempty"`
	AccountSelectionViewAis NullableShortTranslationBlock `json:"accountSelectionViewAis,omitempty"`
	AccountSelectionViewPis NullableTranslationBlock `json:"accountSelectionViewPis,omitempty"`
	DataDownloadViewAis NullableShortTranslationBlock `json:"dataDownloadViewAis,omitempty"`
	PartialConfirmationView NullableShortTranslationBlock `json:"partialConfirmationView,omitempty"`
	UpdateSummaryView NullableShortTranslationBlock `json:"updateSummaryView,omitempty"`
	ConfirmationView NullableShortTranslationBlock `json:"confirmationView,omitempty"`
	ErrorView NullableShortTranslationBlock `json:"errorView,omitempty"`
}

// NewTranslation instantiates a new Translation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslation() *Translation {
	this := Translation{}
	return &this
}

// NewTranslationWithDefaults instantiates a new Translation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationWithDefaults() *Translation {
	this := Translation{}
	return &this
}

// GetBankSearchView returns the BankSearchView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetBankSearchView() ShortTranslationBlock {
	if o == nil || o.BankSearchView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.BankSearchView.Get()
}

// GetBankSearchViewOk returns a tuple with the BankSearchView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetBankSearchViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankSearchView.Get(), o.BankSearchView.IsSet()
}

// HasBankSearchView returns a boolean if a field has been set.
func (o *Translation) HasBankSearchView() bool {
	if o != nil && o.BankSearchView.IsSet() {
		return true
	}

	return false
}

// SetBankSearchView gets a reference to the given NullableShortTranslationBlock and assigns it to the BankSearchView field.
func (o *Translation) SetBankSearchView(v ShortTranslationBlock) {
	o.BankSearchView.Set(&v)
}
// SetBankSearchViewNil sets the value for BankSearchView to be an explicit nil
func (o *Translation) SetBankSearchViewNil() {
	o.BankSearchView.Set(nil)
}

// UnsetBankSearchView ensures that no value is present for BankSearchView, not even an explicit nil
func (o *Translation) UnsetBankSearchView() {
	o.BankSearchView.Unset()
}

// GetBankLoginView returns the BankLoginView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetBankLoginView() TranslationBlock {
	if o == nil || o.BankLoginView.Get() == nil {
		var ret TranslationBlock
		return ret
	}
	return *o.BankLoginView.Get()
}

// GetBankLoginViewOk returns a tuple with the BankLoginView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetBankLoginViewOk() (*TranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankLoginView.Get(), o.BankLoginView.IsSet()
}

// HasBankLoginView returns a boolean if a field has been set.
func (o *Translation) HasBankLoginView() bool {
	if o != nil && o.BankLoginView.IsSet() {
		return true
	}

	return false
}

// SetBankLoginView gets a reference to the given NullableTranslationBlock and assigns it to the BankLoginView field.
func (o *Translation) SetBankLoginView(v TranslationBlock) {
	o.BankLoginView.Set(&v)
}
// SetBankLoginViewNil sets the value for BankLoginView to be an explicit nil
func (o *Translation) SetBankLoginViewNil() {
	o.BankLoginView.Set(nil)
}

// UnsetBankLoginView ensures that no value is present for BankLoginView, not even an explicit nil
func (o *Translation) UnsetBankLoginView() {
	o.BankLoginView.Unset()
}

// GetRedirectBankLoginView returns the RedirectBankLoginView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetRedirectBankLoginView() TranslationBlock {
	if o == nil || o.RedirectBankLoginView.Get() == nil {
		var ret TranslationBlock
		return ret
	}
	return *o.RedirectBankLoginView.Get()
}

// GetRedirectBankLoginViewOk returns a tuple with the RedirectBankLoginView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetRedirectBankLoginViewOk() (*TranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectBankLoginView.Get(), o.RedirectBankLoginView.IsSet()
}

// HasRedirectBankLoginView returns a boolean if a field has been set.
func (o *Translation) HasRedirectBankLoginView() bool {
	if o != nil && o.RedirectBankLoginView.IsSet() {
		return true
	}

	return false
}

// SetRedirectBankLoginView gets a reference to the given NullableTranslationBlock and assigns it to the RedirectBankLoginView field.
func (o *Translation) SetRedirectBankLoginView(v TranslationBlock) {
	o.RedirectBankLoginView.Set(&v)
}
// SetRedirectBankLoginViewNil sets the value for RedirectBankLoginView to be an explicit nil
func (o *Translation) SetRedirectBankLoginViewNil() {
	o.RedirectBankLoginView.Set(nil)
}

// UnsetRedirectBankLoginView ensures that no value is present for RedirectBankLoginView, not even an explicit nil
func (o *Translation) UnsetRedirectBankLoginView() {
	o.RedirectBankLoginView.Unset()
}

// GetScaMethodSelectionView returns the ScaMethodSelectionView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetScaMethodSelectionView() ShortTranslationBlock {
	if o == nil || o.ScaMethodSelectionView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.ScaMethodSelectionView.Get()
}

// GetScaMethodSelectionViewOk returns a tuple with the ScaMethodSelectionView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetScaMethodSelectionViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaMethodSelectionView.Get(), o.ScaMethodSelectionView.IsSet()
}

// HasScaMethodSelectionView returns a boolean if a field has been set.
func (o *Translation) HasScaMethodSelectionView() bool {
	if o != nil && o.ScaMethodSelectionView.IsSet() {
		return true
	}

	return false
}

// SetScaMethodSelectionView gets a reference to the given NullableShortTranslationBlock and assigns it to the ScaMethodSelectionView field.
func (o *Translation) SetScaMethodSelectionView(v ShortTranslationBlock) {
	o.ScaMethodSelectionView.Set(&v)
}
// SetScaMethodSelectionViewNil sets the value for ScaMethodSelectionView to be an explicit nil
func (o *Translation) SetScaMethodSelectionViewNil() {
	o.ScaMethodSelectionView.Set(nil)
}

// UnsetScaMethodSelectionView ensures that no value is present for ScaMethodSelectionView, not even an explicit nil
func (o *Translation) UnsetScaMethodSelectionView() {
	o.ScaMethodSelectionView.Unset()
}

// GetScaChallengeView returns the ScaChallengeView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetScaChallengeView() ShortTranslationBlock {
	if o == nil || o.ScaChallengeView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.ScaChallengeView.Get()
}

// GetScaChallengeViewOk returns a tuple with the ScaChallengeView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetScaChallengeViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScaChallengeView.Get(), o.ScaChallengeView.IsSet()
}

// HasScaChallengeView returns a boolean if a field has been set.
func (o *Translation) HasScaChallengeView() bool {
	if o != nil && o.ScaChallengeView.IsSet() {
		return true
	}

	return false
}

// SetScaChallengeView gets a reference to the given NullableShortTranslationBlock and assigns it to the ScaChallengeView field.
func (o *Translation) SetScaChallengeView(v ShortTranslationBlock) {
	o.ScaChallengeView.Set(&v)
}
// SetScaChallengeViewNil sets the value for ScaChallengeView to be an explicit nil
func (o *Translation) SetScaChallengeViewNil() {
	o.ScaChallengeView.Set(nil)
}

// UnsetScaChallengeView ensures that no value is present for ScaChallengeView, not even an explicit nil
func (o *Translation) UnsetScaChallengeView() {
	o.ScaChallengeView.Unset()
}

// GetAccountSelectionViewAis returns the AccountSelectionViewAis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetAccountSelectionViewAis() ShortTranslationBlock {
	if o == nil || o.AccountSelectionViewAis.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.AccountSelectionViewAis.Get()
}

// GetAccountSelectionViewAisOk returns a tuple with the AccountSelectionViewAis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetAccountSelectionViewAisOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountSelectionViewAis.Get(), o.AccountSelectionViewAis.IsSet()
}

// HasAccountSelectionViewAis returns a boolean if a field has been set.
func (o *Translation) HasAccountSelectionViewAis() bool {
	if o != nil && o.AccountSelectionViewAis.IsSet() {
		return true
	}

	return false
}

// SetAccountSelectionViewAis gets a reference to the given NullableShortTranslationBlock and assigns it to the AccountSelectionViewAis field.
func (o *Translation) SetAccountSelectionViewAis(v ShortTranslationBlock) {
	o.AccountSelectionViewAis.Set(&v)
}
// SetAccountSelectionViewAisNil sets the value for AccountSelectionViewAis to be an explicit nil
func (o *Translation) SetAccountSelectionViewAisNil() {
	o.AccountSelectionViewAis.Set(nil)
}

// UnsetAccountSelectionViewAis ensures that no value is present for AccountSelectionViewAis, not even an explicit nil
func (o *Translation) UnsetAccountSelectionViewAis() {
	o.AccountSelectionViewAis.Unset()
}

// GetAccountSelectionViewPis returns the AccountSelectionViewPis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetAccountSelectionViewPis() TranslationBlock {
	if o == nil || o.AccountSelectionViewPis.Get() == nil {
		var ret TranslationBlock
		return ret
	}
	return *o.AccountSelectionViewPis.Get()
}

// GetAccountSelectionViewPisOk returns a tuple with the AccountSelectionViewPis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetAccountSelectionViewPisOk() (*TranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountSelectionViewPis.Get(), o.AccountSelectionViewPis.IsSet()
}

// HasAccountSelectionViewPis returns a boolean if a field has been set.
func (o *Translation) HasAccountSelectionViewPis() bool {
	if o != nil && o.AccountSelectionViewPis.IsSet() {
		return true
	}

	return false
}

// SetAccountSelectionViewPis gets a reference to the given NullableTranslationBlock and assigns it to the AccountSelectionViewPis field.
func (o *Translation) SetAccountSelectionViewPis(v TranslationBlock) {
	o.AccountSelectionViewPis.Set(&v)
}
// SetAccountSelectionViewPisNil sets the value for AccountSelectionViewPis to be an explicit nil
func (o *Translation) SetAccountSelectionViewPisNil() {
	o.AccountSelectionViewPis.Set(nil)
}

// UnsetAccountSelectionViewPis ensures that no value is present for AccountSelectionViewPis, not even an explicit nil
func (o *Translation) UnsetAccountSelectionViewPis() {
	o.AccountSelectionViewPis.Unset()
}

// GetDataDownloadViewAis returns the DataDownloadViewAis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetDataDownloadViewAis() ShortTranslationBlock {
	if o == nil || o.DataDownloadViewAis.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.DataDownloadViewAis.Get()
}

// GetDataDownloadViewAisOk returns a tuple with the DataDownloadViewAis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetDataDownloadViewAisOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataDownloadViewAis.Get(), o.DataDownloadViewAis.IsSet()
}

// HasDataDownloadViewAis returns a boolean if a field has been set.
func (o *Translation) HasDataDownloadViewAis() bool {
	if o != nil && o.DataDownloadViewAis.IsSet() {
		return true
	}

	return false
}

// SetDataDownloadViewAis gets a reference to the given NullableShortTranslationBlock and assigns it to the DataDownloadViewAis field.
func (o *Translation) SetDataDownloadViewAis(v ShortTranslationBlock) {
	o.DataDownloadViewAis.Set(&v)
}
// SetDataDownloadViewAisNil sets the value for DataDownloadViewAis to be an explicit nil
func (o *Translation) SetDataDownloadViewAisNil() {
	o.DataDownloadViewAis.Set(nil)
}

// UnsetDataDownloadViewAis ensures that no value is present for DataDownloadViewAis, not even an explicit nil
func (o *Translation) UnsetDataDownloadViewAis() {
	o.DataDownloadViewAis.Unset()
}

// GetPartialConfirmationView returns the PartialConfirmationView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetPartialConfirmationView() ShortTranslationBlock {
	if o == nil || o.PartialConfirmationView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.PartialConfirmationView.Get()
}

// GetPartialConfirmationViewOk returns a tuple with the PartialConfirmationView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetPartialConfirmationViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartialConfirmationView.Get(), o.PartialConfirmationView.IsSet()
}

// HasPartialConfirmationView returns a boolean if a field has been set.
func (o *Translation) HasPartialConfirmationView() bool {
	if o != nil && o.PartialConfirmationView.IsSet() {
		return true
	}

	return false
}

// SetPartialConfirmationView gets a reference to the given NullableShortTranslationBlock and assigns it to the PartialConfirmationView field.
func (o *Translation) SetPartialConfirmationView(v ShortTranslationBlock) {
	o.PartialConfirmationView.Set(&v)
}
// SetPartialConfirmationViewNil sets the value for PartialConfirmationView to be an explicit nil
func (o *Translation) SetPartialConfirmationViewNil() {
	o.PartialConfirmationView.Set(nil)
}

// UnsetPartialConfirmationView ensures that no value is present for PartialConfirmationView, not even an explicit nil
func (o *Translation) UnsetPartialConfirmationView() {
	o.PartialConfirmationView.Unset()
}

// GetUpdateSummaryView returns the UpdateSummaryView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetUpdateSummaryView() ShortTranslationBlock {
	if o == nil || o.UpdateSummaryView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.UpdateSummaryView.Get()
}

// GetUpdateSummaryViewOk returns a tuple with the UpdateSummaryView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetUpdateSummaryViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateSummaryView.Get(), o.UpdateSummaryView.IsSet()
}

// HasUpdateSummaryView returns a boolean if a field has been set.
func (o *Translation) HasUpdateSummaryView() bool {
	if o != nil && o.UpdateSummaryView.IsSet() {
		return true
	}

	return false
}

// SetUpdateSummaryView gets a reference to the given NullableShortTranslationBlock and assigns it to the UpdateSummaryView field.
func (o *Translation) SetUpdateSummaryView(v ShortTranslationBlock) {
	o.UpdateSummaryView.Set(&v)
}
// SetUpdateSummaryViewNil sets the value for UpdateSummaryView to be an explicit nil
func (o *Translation) SetUpdateSummaryViewNil() {
	o.UpdateSummaryView.Set(nil)
}

// UnsetUpdateSummaryView ensures that no value is present for UpdateSummaryView, not even an explicit nil
func (o *Translation) UnsetUpdateSummaryView() {
	o.UpdateSummaryView.Unset()
}

// GetConfirmationView returns the ConfirmationView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetConfirmationView() ShortTranslationBlock {
	if o == nil || o.ConfirmationView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.ConfirmationView.Get()
}

// GetConfirmationViewOk returns a tuple with the ConfirmationView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetConfirmationViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfirmationView.Get(), o.ConfirmationView.IsSet()
}

// HasConfirmationView returns a boolean if a field has been set.
func (o *Translation) HasConfirmationView() bool {
	if o != nil && o.ConfirmationView.IsSet() {
		return true
	}

	return false
}

// SetConfirmationView gets a reference to the given NullableShortTranslationBlock and assigns it to the ConfirmationView field.
func (o *Translation) SetConfirmationView(v ShortTranslationBlock) {
	o.ConfirmationView.Set(&v)
}
// SetConfirmationViewNil sets the value for ConfirmationView to be an explicit nil
func (o *Translation) SetConfirmationViewNil() {
	o.ConfirmationView.Set(nil)
}

// UnsetConfirmationView ensures that no value is present for ConfirmationView, not even an explicit nil
func (o *Translation) UnsetConfirmationView() {
	o.ConfirmationView.Unset()
}

// GetErrorView returns the ErrorView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Translation) GetErrorView() ShortTranslationBlock {
	if o == nil || o.ErrorView.Get() == nil {
		var ret ShortTranslationBlock
		return ret
	}
	return *o.ErrorView.Get()
}

// GetErrorViewOk returns a tuple with the ErrorView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Translation) GetErrorViewOk() (*ShortTranslationBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorView.Get(), o.ErrorView.IsSet()
}

// HasErrorView returns a boolean if a field has been set.
func (o *Translation) HasErrorView() bool {
	if o != nil && o.ErrorView.IsSet() {
		return true
	}

	return false
}

// SetErrorView gets a reference to the given NullableShortTranslationBlock and assigns it to the ErrorView field.
func (o *Translation) SetErrorView(v ShortTranslationBlock) {
	o.ErrorView.Set(&v)
}
// SetErrorViewNil sets the value for ErrorView to be an explicit nil
func (o *Translation) SetErrorViewNil() {
	o.ErrorView.Set(nil)
}

// UnsetErrorView ensures that no value is present for ErrorView, not even an explicit nil
func (o *Translation) UnsetErrorView() {
	o.ErrorView.Unset()
}

func (o Translation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BankSearchView.IsSet() {
		toSerialize["bankSearchView"] = o.BankSearchView.Get()
	}
	if o.BankLoginView.IsSet() {
		toSerialize["bankLoginView"] = o.BankLoginView.Get()
	}
	if o.RedirectBankLoginView.IsSet() {
		toSerialize["redirectBankLoginView"] = o.RedirectBankLoginView.Get()
	}
	if o.ScaMethodSelectionView.IsSet() {
		toSerialize["scaMethodSelectionView"] = o.ScaMethodSelectionView.Get()
	}
	if o.ScaChallengeView.IsSet() {
		toSerialize["scaChallengeView"] = o.ScaChallengeView.Get()
	}
	if o.AccountSelectionViewAis.IsSet() {
		toSerialize["accountSelectionViewAis"] = o.AccountSelectionViewAis.Get()
	}
	if o.AccountSelectionViewPis.IsSet() {
		toSerialize["accountSelectionViewPis"] = o.AccountSelectionViewPis.Get()
	}
	if o.DataDownloadViewAis.IsSet() {
		toSerialize["dataDownloadViewAis"] = o.DataDownloadViewAis.Get()
	}
	if o.PartialConfirmationView.IsSet() {
		toSerialize["partialConfirmationView"] = o.PartialConfirmationView.Get()
	}
	if o.UpdateSummaryView.IsSet() {
		toSerialize["updateSummaryView"] = o.UpdateSummaryView.Get()
	}
	if o.ConfirmationView.IsSet() {
		toSerialize["confirmationView"] = o.ConfirmationView.Get()
	}
	if o.ErrorView.IsSet() {
		toSerialize["errorView"] = o.ErrorView.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTranslation struct {
	value *Translation
	isSet bool
}

func (v NullableTranslation) Get() *Translation {
	return v.value
}

func (v *NullableTranslation) Set(val *Translation) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslation(val *Translation) *NullableTranslation {
	return &NullableTranslation{value: val, isSet: true}
}

func (v NullableTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


