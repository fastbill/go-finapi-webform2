/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// TaskCallback struct for TaskCallback
type TaskCallback struct {
	// Task's identifier
	TaskId string `json:"taskId"`
	Status TaskStatus `json:"status"`
	WebForm NullableWebFormInfo `json:"webForm,omitempty"`
}

// NewTaskCallback instantiates a new TaskCallback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskCallback(taskId string, status TaskStatus) *TaskCallback {
	this := TaskCallback{}
	this.TaskId = taskId
	this.Status = status
	return &this
}

// NewTaskCallbackWithDefaults instantiates a new TaskCallback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskCallbackWithDefaults() *TaskCallback {
	this := TaskCallback{}
	return &this
}

// GetTaskId returns the TaskId field value
func (o *TaskCallback) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *TaskCallback) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *TaskCallback) SetTaskId(v string) {
	o.TaskId = v
}

// GetStatus returns the Status field value
func (o *TaskCallback) GetStatus() TaskStatus {
	if o == nil {
		var ret TaskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TaskCallback) GetStatusOk() (*TaskStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TaskCallback) SetStatus(v TaskStatus) {
	o.Status = v
}

// GetWebForm returns the WebForm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskCallback) GetWebForm() WebFormInfo {
	if o == nil || o.WebForm.Get() == nil {
		var ret WebFormInfo
		return ret
	}
	return *o.WebForm.Get()
}

// GetWebFormOk returns a tuple with the WebForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskCallback) GetWebFormOk() (*WebFormInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebForm.Get(), o.WebForm.IsSet()
}

// HasWebForm returns a boolean if a field has been set.
func (o *TaskCallback) HasWebForm() bool {
	if o != nil && o.WebForm.IsSet() {
		return true
	}

	return false
}

// SetWebForm gets a reference to the given NullableWebFormInfo and assigns it to the WebForm field.
func (o *TaskCallback) SetWebForm(v WebFormInfo) {
	o.WebForm.Set(&v)
}
// SetWebFormNil sets the value for WebForm to be an explicit nil
func (o *TaskCallback) SetWebFormNil() {
	o.WebForm.Set(nil)
}

// UnsetWebForm ensures that no value is present for WebForm, not even an explicit nil
func (o *TaskCallback) UnsetWebForm() {
	o.WebForm.Unset()
}

func (o TaskCallback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["taskId"] = o.TaskId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.WebForm.IsSet() {
		toSerialize["webForm"] = o.WebForm.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTaskCallback struct {
	value *TaskCallback
	isSet bool
}

func (v NullableTaskCallback) Get() *TaskCallback {
	return v.value
}

func (v *NullableTaskCallback) Set(val *TaskCallback) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskCallback) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskCallback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskCallback(val *TaskCallback) *NullableTaskCallback {
	return &NullableTaskCallback{value: val, isSet: true}
}

func (v NullableTaskCallback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskCallback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


