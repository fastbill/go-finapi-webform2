/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// Icon Customization of various icons used in web form
type Icon struct {
	// The image that will be rendered on the Web Form when an info icon needs to be rendered. When it is provided, this image will be used instead of the default info icon.<br/>The image must follow the DATA URI scheme: <code>data:[\\<media type\\>][;base64],\\<data\\></code>
	Info NullableString `json:"info,omitempty"`
	// The loading icon which will be rendered on the web form while it is importing data in the background. When it is provided, this GIF will be used instead of the default loading animation.<br/>The image must follow the DATA URI scheme: <code>data:[\\<media type\\>][;base64],\\<data\\></code>
	Loading NullableString `json:"loading,omitempty"`
}

// NewIcon instantiates a new Icon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIcon() *Icon {
	this := Icon{}
	return &this
}

// NewIconWithDefaults instantiates a new Icon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconWithDefaults() *Icon {
	this := Icon{}
	return &this
}

// GetInfo returns the Info field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Icon) GetInfo() string {
	if o == nil || o.Info.Get() == nil {
		var ret string
		return ret
	}
	return *o.Info.Get()
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Icon) GetInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Info.Get(), o.Info.IsSet()
}

// HasInfo returns a boolean if a field has been set.
func (o *Icon) HasInfo() bool {
	if o != nil && o.Info.IsSet() {
		return true
	}

	return false
}

// SetInfo gets a reference to the given NullableString and assigns it to the Info field.
func (o *Icon) SetInfo(v string) {
	o.Info.Set(&v)
}
// SetInfoNil sets the value for Info to be an explicit nil
func (o *Icon) SetInfoNil() {
	o.Info.Set(nil)
}

// UnsetInfo ensures that no value is present for Info, not even an explicit nil
func (o *Icon) UnsetInfo() {
	o.Info.Unset()
}

// GetLoading returns the Loading field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Icon) GetLoading() string {
	if o == nil || o.Loading.Get() == nil {
		var ret string
		return ret
	}
	return *o.Loading.Get()
}

// GetLoadingOk returns a tuple with the Loading field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Icon) GetLoadingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Loading.Get(), o.Loading.IsSet()
}

// HasLoading returns a boolean if a field has been set.
func (o *Icon) HasLoading() bool {
	if o != nil && o.Loading.IsSet() {
		return true
	}

	return false
}

// SetLoading gets a reference to the given NullableString and assigns it to the Loading field.
func (o *Icon) SetLoading(v string) {
	o.Loading.Set(&v)
}
// SetLoadingNil sets the value for Loading to be an explicit nil
func (o *Icon) SetLoadingNil() {
	o.Loading.Set(nil)
}

// UnsetLoading ensures that no value is present for Loading, not even an explicit nil
func (o *Icon) UnsetLoading() {
	o.Loading.Unset()
}

func (o Icon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Info.IsSet() {
		toSerialize["info"] = o.Info.Get()
	}
	if o.Loading.IsSet() {
		toSerialize["loading"] = o.Loading.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIcon struct {
	value *Icon
	isSet bool
}

func (v NullableIcon) Get() *Icon {
	return v.value
}

func (v *NullableIcon) Set(val *Icon) {
	v.value = val
	v.isSet = true
}

func (v NullableIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIcon(val *Icon) *NullableIcon {
	return &NullableIcon{value: val, isSet: true}
}

func (v NullableIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


