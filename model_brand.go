/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// Brand Customization related to branding
type Brand struct {
	// Logo of minimum height 40px that will be shown in the web form header.Bigger images are also accepted, but will be scaled down.<br/>The image must follow the DATA URI scheme: <code>data:[\\<media type\\>][;base64],\\<data\\></code><br/><br/><strong>NOTE:</strong> For `UNLICENSED` mandators, if no value is provided, then the following value will be applied by default when web form is opened: <br/><code>finAPI GmbH Logo</code>
	Logo NullableString `json:"logo,omitempty"`
	// Logo of minimum size 32x32px that will be shown in the browser tab favicon.<br/>The image must follow the DATA URI scheme: <code>data:[\\<media type\\>][;base64],\\<data\\></code><br/><br/><strong>NOTE:</strong> For `UNLICENSED` mandators, if no value is provided, then the following value will be applied by default when web form is opened: <br/><code>finAPI GmbH favicon</code>
	Favicon NullableString `json:"favicon,omitempty"`
	Icon NullableIcon `json:"icon,omitempty"`
	// An introduction text that will be shown on the first web form view for bank selection.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>null</code>.
	IntroText NullableString `json:"introText,omitempty"`
}

// NewBrand instantiates a new Brand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrand() *Brand {
	this := Brand{}
	return &this
}

// NewBrandWithDefaults instantiates a new Brand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandWithDefaults() *Brand {
	this := Brand{}
	return &this
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Brand) GetLogo() string {
	if o == nil || o.Logo.Get() == nil {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Brand) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *Brand) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *Brand) SetLogo(v string) {
	o.Logo.Set(&v)
}
// SetLogoNil sets the value for Logo to be an explicit nil
func (o *Brand) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *Brand) UnsetLogo() {
	o.Logo.Unset()
}

// GetFavicon returns the Favicon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Brand) GetFavicon() string {
	if o == nil || o.Favicon.Get() == nil {
		var ret string
		return ret
	}
	return *o.Favicon.Get()
}

// GetFaviconOk returns a tuple with the Favicon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Brand) GetFaviconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Favicon.Get(), o.Favicon.IsSet()
}

// HasFavicon returns a boolean if a field has been set.
func (o *Brand) HasFavicon() bool {
	if o != nil && o.Favicon.IsSet() {
		return true
	}

	return false
}

// SetFavicon gets a reference to the given NullableString and assigns it to the Favicon field.
func (o *Brand) SetFavicon(v string) {
	o.Favicon.Set(&v)
}
// SetFaviconNil sets the value for Favicon to be an explicit nil
func (o *Brand) SetFaviconNil() {
	o.Favicon.Set(nil)
}

// UnsetFavicon ensures that no value is present for Favicon, not even an explicit nil
func (o *Brand) UnsetFavicon() {
	o.Favicon.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Brand) GetIcon() Icon {
	if o == nil || o.Icon.Get() == nil {
		var ret Icon
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Brand) GetIconOk() (*Icon, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *Brand) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableIcon and assigns it to the Icon field.
func (o *Brand) SetIcon(v Icon) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *Brand) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *Brand) UnsetIcon() {
	o.Icon.Unset()
}

// GetIntroText returns the IntroText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Brand) GetIntroText() string {
	if o == nil || o.IntroText.Get() == nil {
		var ret string
		return ret
	}
	return *o.IntroText.Get()
}

// GetIntroTextOk returns a tuple with the IntroText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Brand) GetIntroTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntroText.Get(), o.IntroText.IsSet()
}

// HasIntroText returns a boolean if a field has been set.
func (o *Brand) HasIntroText() bool {
	if o != nil && o.IntroText.IsSet() {
		return true
	}

	return false
}

// SetIntroText gets a reference to the given NullableString and assigns it to the IntroText field.
func (o *Brand) SetIntroText(v string) {
	o.IntroText.Set(&v)
}
// SetIntroTextNil sets the value for IntroText to be an explicit nil
func (o *Brand) SetIntroTextNil() {
	o.IntroText.Set(nil)
}

// UnsetIntroText ensures that no value is present for IntroText, not even an explicit nil
func (o *Brand) UnsetIntroText() {
	o.IntroText.Unset()
}

func (o Brand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if o.Favicon.IsSet() {
		toSerialize["favicon"] = o.Favicon.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.IntroText.IsSet() {
		toSerialize["introText"] = o.IntroText.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBrand struct {
	value *Brand
	isSet bool
}

func (v NullableBrand) Get() *Brand {
	return v.value
}

func (v *NullableBrand) Set(val *Brand) {
	v.value = val
	v.isSet = true
}

func (v NullableBrand) IsSet() bool {
	return v.isSet
}

func (v *NullableBrand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrand(val *Brand) *NullableBrand {
	return &NullableBrand{value: val, isSet: true}
}

func (v NullableBrand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


