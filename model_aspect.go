/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// Aspect Customization of web form aspect properties
type Aspect struct {
	ColorScheme NullableColor `json:"colorScheme,omitempty"`
	Text NullableText `json:"text,omitempty"`
	// <strong>Allowed:</strong> DEFAULT | MOBILE_MINIMALISTIC<br/><strong>BETA</strong>: This service is currently in BETA phase. Provided themes can be changed and/or deleted before the service goes live.<br/>Theme will provide further granularity with the styling possibilities for customers. This includes styling of buttons, text fields, text spacing, sizing of titles, and subtitles amongst others.<br/>Find more info in the <a href='https://documentation.finapi.io/webform/themes' target='_blank'>Web Form 2.0 Public Documentation</a>.
	Theme NullableString `json:"theme,omitempty"`
}

// NewAspect instantiates a new Aspect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAspect() *Aspect {
	this := Aspect{}
	return &this
}

// NewAspectWithDefaults instantiates a new Aspect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAspectWithDefaults() *Aspect {
	this := Aspect{}
	return &this
}

// GetColorScheme returns the ColorScheme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Aspect) GetColorScheme() Color {
	if o == nil || o.ColorScheme.Get() == nil {
		var ret Color
		return ret
	}
	return *o.ColorScheme.Get()
}

// GetColorSchemeOk returns a tuple with the ColorScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Aspect) GetColorSchemeOk() (*Color, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColorScheme.Get(), o.ColorScheme.IsSet()
}

// HasColorScheme returns a boolean if a field has been set.
func (o *Aspect) HasColorScheme() bool {
	if o != nil && o.ColorScheme.IsSet() {
		return true
	}

	return false
}

// SetColorScheme gets a reference to the given NullableColor and assigns it to the ColorScheme field.
func (o *Aspect) SetColorScheme(v Color) {
	o.ColorScheme.Set(&v)
}
// SetColorSchemeNil sets the value for ColorScheme to be an explicit nil
func (o *Aspect) SetColorSchemeNil() {
	o.ColorScheme.Set(nil)
}

// UnsetColorScheme ensures that no value is present for ColorScheme, not even an explicit nil
func (o *Aspect) UnsetColorScheme() {
	o.ColorScheme.Unset()
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Aspect) GetText() Text {
	if o == nil || o.Text.Get() == nil {
		var ret Text
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Aspect) GetTextOk() (*Text, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *Aspect) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableText and assigns it to the Text field.
func (o *Aspect) SetText(v Text) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *Aspect) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *Aspect) UnsetText() {
	o.Text.Unset()
}

// GetTheme returns the Theme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Aspect) GetTheme() string {
	if o == nil || o.Theme.Get() == nil {
		var ret string
		return ret
	}
	return *o.Theme.Get()
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Aspect) GetThemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Theme.Get(), o.Theme.IsSet()
}

// HasTheme returns a boolean if a field has been set.
func (o *Aspect) HasTheme() bool {
	if o != nil && o.Theme.IsSet() {
		return true
	}

	return false
}

// SetTheme gets a reference to the given NullableString and assigns it to the Theme field.
func (o *Aspect) SetTheme(v string) {
	o.Theme.Set(&v)
}
// SetThemeNil sets the value for Theme to be an explicit nil
func (o *Aspect) SetThemeNil() {
	o.Theme.Set(nil)
}

// UnsetTheme ensures that no value is present for Theme, not even an explicit nil
func (o *Aspect) UnsetTheme() {
	o.Theme.Unset()
}

func (o Aspect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColorScheme.IsSet() {
		toSerialize["colorScheme"] = o.ColorScheme.Get()
	}
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	if o.Theme.IsSet() {
		toSerialize["theme"] = o.Theme.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAspect struct {
	value *Aspect
	isSet bool
}

func (v NullableAspect) Get() *Aspect {
	return v.value
}

func (v *NullableAspect) Set(val *Aspect) {
	v.value = val
	v.isSet = true
}

func (v NullableAspect) IsSet() bool {
	return v.isSet
}

func (v *NullableAspect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAspect(val *Aspect) *NullableAspect {
	return &NullableAspect{value: val, isSet: true}
}

func (v NullableAspect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAspect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


