/*
finAPI Web Form 2.0

The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.

API version: 2.430.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package webform2

import (
	"encoding/json"
)

// TaskPayload Payload of the task
type TaskPayload struct {
	// Identifier of the bank connection in the Access API. Initialized as soon as the task process is started. Use those ID to gather Bank Connection data from Access endpoints like, \"<a target='_blank' href='https://docs.finapi.io/?product=access#get-/api/v1/bankConnections/-id-'>Get a bank connection</a>\" or \"<a target='_blank' href='https://docs.finapi.io/?product=access#get-/api/v1/accounts'>Get and search all accounts</a>\".
	BankConnectionId int64 `json:"bankConnectionId"`
	WebForm NullableWebFormInfo `json:"webForm,omitempty"`
	// Reason of the task failure.<br/><strong>NOTE:</strong> This enum can be extended in the future as new cases arise!<br/><br/>Codes can be interpreted as follows:<br/>&bull; <code>BANK_SERVER_REJECTION</code> - the flow has been terminated on the bank side, e.g., in case of incorrect credentials;<br/>&bull; <code>INVALID_TOKEN</code> - the given access token expired or became invalid during the flow; <br/>&bull; <code>UNEXPECTED_ACCESS_RESPONSE</code> - an unexpected response has been received from the Access API - similarly to the <code>INTERNAL_ERROR</code> code, please forward all details to our Customer Support team; <br/>&bull; <code>INTERNAL_ERROR</code> - the reason of the failure can not be identified - please forward all the details to our Customer Support team in order to get more info and also help us to eliminate the issue.
	ErrorCode NullableString `json:"errorCode,omitempty"`
}

// NewTaskPayload instantiates a new TaskPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskPayload(bankConnectionId int64) *TaskPayload {
	this := TaskPayload{}
	this.BankConnectionId = bankConnectionId
	return &this
}

// NewTaskPayloadWithDefaults instantiates a new TaskPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskPayloadWithDefaults() *TaskPayload {
	this := TaskPayload{}
	return &this
}

// GetBankConnectionId returns the BankConnectionId field value
func (o *TaskPayload) GetBankConnectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BankConnectionId
}

// GetBankConnectionIdOk returns a tuple with the BankConnectionId field value
// and a boolean to check if the value has been set.
func (o *TaskPayload) GetBankConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankConnectionId, true
}

// SetBankConnectionId sets field value
func (o *TaskPayload) SetBankConnectionId(v int64) {
	o.BankConnectionId = v
}

// GetWebForm returns the WebForm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskPayload) GetWebForm() WebFormInfo {
	if o == nil || o.WebForm.Get() == nil {
		var ret WebFormInfo
		return ret
	}
	return *o.WebForm.Get()
}

// GetWebFormOk returns a tuple with the WebForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskPayload) GetWebFormOk() (*WebFormInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebForm.Get(), o.WebForm.IsSet()
}

// HasWebForm returns a boolean if a field has been set.
func (o *TaskPayload) HasWebForm() bool {
	if o != nil && o.WebForm.IsSet() {
		return true
	}

	return false
}

// SetWebForm gets a reference to the given NullableWebFormInfo and assigns it to the WebForm field.
func (o *TaskPayload) SetWebForm(v WebFormInfo) {
	o.WebForm.Set(&v)
}
// SetWebFormNil sets the value for WebForm to be an explicit nil
func (o *TaskPayload) SetWebFormNil() {
	o.WebForm.Set(nil)
}

// UnsetWebForm ensures that no value is present for WebForm, not even an explicit nil
func (o *TaskPayload) UnsetWebForm() {
	o.WebForm.Unset()
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskPayload) GetErrorCode() string {
	if o == nil || o.ErrorCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskPayload) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *TaskPayload) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *TaskPayload) SetErrorCode(v string) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *TaskPayload) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *TaskPayload) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

func (o TaskPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bankConnectionId"] = o.BankConnectionId
	}
	if o.WebForm.IsSet() {
		toSerialize["webForm"] = o.WebForm.Get()
	}
	if o.ErrorCode.IsSet() {
		toSerialize["errorCode"] = o.ErrorCode.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTaskPayload struct {
	value *TaskPayload
	isSet bool
}

func (v NullableTaskPayload) Get() *TaskPayload {
	return v.value
}

func (v *NullableTaskPayload) Set(val *TaskPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskPayload(val *TaskPayload) *NullableTaskPayload {
	return &NullableTaskPayload{value: val, isSet: true}
}

func (v NullableTaskPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


